{"ast":null,"code":"var _jsxFileName = \"E:\\\\DK Rabbit\\\\Mongo-React-Nest-Note-App\\\\frontend\\\\src\\\\components\\\\form\\\\TextInputField.tsx\";\nimport { Form } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextInputField = ({\n  name,\n  label,\n  register,\n  registerOptions,\n  error,\n  ...props\n}) => {\n  return /*#__PURE__*/_jsxDEV(Form.Group, {\n    className: \"mb-3\",\n    controlId: name + \"-input\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      ...props,\n      ...register(name, registerOptions),\n      isInvalid: !!error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control.Feedback, {\n      type: \"invalid\",\n      children: error === null || error === void 0 ? void 0 : error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n};\n_c = TextInputField;\nexport default TextInputField;\nvar _c;\n$RefreshReg$(_c, \"TextInputField\");","map":{"version":3,"names":["Form","jsxDEV","_jsxDEV","TextInputField","name","label","register","registerOptions","error","props","Group","className","controlId","children","Label","fileName","_jsxFileName","lineNumber","columnNumber","Control","isInvalid","Feedback","type","message","_c","$RefreshReg$"],"sources":["E:/DK Rabbit/Mongo-React-Nest-Note-App/frontend/src/components/form/TextInputField.tsx"],"sourcesContent":["import { Form } from \"react-bootstrap\";\r\nimport { FieldError, RegisterOptions, UseFormRegister } from \"react-hook-form\";\r\n\r\ninterface TextInputFieldProps {\r\n    name: string,\r\n    label: string,\r\n    register: UseFormRegister<any>,\r\n    registerOptions?: RegisterOptions,\r\n    error?: FieldError,\r\n    [x: string]: any,\r\n}\r\n\r\nconst TextInputField = ({name, label, register, registerOptions, error, ...props} : TextInputFieldProps) => {\r\n    return (\r\n        <Form.Group className=\"mb-3\" controlId={name + \"-input\"}>\r\n            <Form.Label>{label}</Form.Label>\r\n            <Form.Control\r\n                {...props}\r\n                {...register(name, registerOptions)}\r\n                isInvalid={!!error}\r\n            />\r\n            <Form.Control.Feedback type=\"invalid\">\r\n                {error?.message}\r\n            </Form.Control.Feedback>\r\n        </Form.Group>\r\n    );\r\n}\r\n\r\nexport default TextInputField;"],"mappings":";AAAA,SAASA,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAYvC,MAAMC,cAAc,GAAGA,CAAC;EAACC,IAAI;EAAEC,KAAK;EAAEC,QAAQ;EAAEC,eAAe;EAAEC,KAAK;EAAE,GAAGC;AAA2B,CAAC,KAAK;EACxG,oBACIP,OAAA,CAACF,IAAI,CAACU,KAAK;IAACC,SAAS,EAAC,MAAM;IAACC,SAAS,EAAER,IAAI,GAAG,QAAS;IAAAS,QAAA,gBACpDX,OAAA,CAACF,IAAI,CAACc,KAAK;MAAAD,QAAA,EAAER;IAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,eAChChB,OAAA,CAACF,IAAI,CAACmB,OAAO;MAAA,GACLV,KAAK;MAAA,GACLH,QAAQ,CAACF,IAAI,EAAEG,eAAe,CAAC;MACnCa,SAAS,EAAE,CAAC,CAACZ;IAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACFhB,OAAA,CAACF,IAAI,CAACmB,OAAO,CAACE,QAAQ;MAACC,IAAI,EAAC,SAAS;MAAAT,QAAA,EAChCL,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEe;IAAO;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAErB,CAAC;AAAAM,EAAA,GAdKrB,cAAc;AAgBpB,eAAeA,cAAc;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}